# -*- coding: utf-8 -*-
"""finished_orange_class_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fhAOO727YTwEksV-U971T7tX1DiYBGL9
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.optimizers import Adam
from google.colab import drive

drive.mount("/content/Data")

train = ImageDataGenerator(rescale=(1/255))
validation = ImageDataGenerator(rescale=1/255)

train_dataset = train.flow_from_directory("/content/Data/MyDrive/Data/Train", target_size=(200, 200), class_mode="binary")

validation_dataset = train.flow_from_directory("/content/Data/MyDrive/Data/Validate", target_size=(200, 200),class_mode="binary")

train_dataset.class_indices

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(16, (3, 3), activation="relu", input_shape=(200, 200, 3)),
                                    tf.keras.layers.MaxPool2D(2, 2),
                                    # 
                                    tf.keras.layers.Conv2D(32, (3, 3), activation="relu"),
                                    tf.keras.layers.MaxPool2D(2, 2),
                                    # 
                                    tf.keras.layers.Conv2D(64, (3, 3), activation="relu"),
                                    tf.keras.layers.MaxPool2D(2, 2),
                                    # 
                                    tf.keras.layers.Flatten(),

                                    tf.keras.layers.Dense(512, activation="relu"),
                                    # 
                                    tf.keras.layers.Dense(1, activation="sigmoid")

])

model.compile(optimizer=Adam(learning_rate=1e-3),
              loss=tf.keras.losses.BinaryCrossentropy(),
              metrics=[tf.keras.metrics.BinaryAccuracy(),
                       tf.keras.metrics.FalseNegatives()])

model_fit = model.fit(train_dataset,
                      steps_per_epoch=3, 
                      epochs=10, 
                      validation_data=validation_dataset)

dir_path = "/content/Data/MyDrive/Data/Testing"
import os
for i in os.listdir(dir_path):
  img = image.load_img(dir_path +"/"+ i, target_size=(200, 200))
  plt.imshow(img)
  plt.show()

  X = image.img_to_array(img)
  X = np.expand_dims(X, axis=0)
  images = np.vstack([X])
  val = model.predict(images)

  if val == 0:
    print("Fresh")
  else:
    print("Rotten")